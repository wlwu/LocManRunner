apply plugin:'com.android.application'
apply from: '../pipeline.gradle'
apply from: '../jacoco.gradle'
ext{
    project_module=new ArrayList<String>()
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

task saveModuleForApplication(){
    Properties properties=new Properties();
    properties.setProperty("module","${module_choose_url}");
}

task writeModuleForApplication(){

}

/*task setPorjectModule(){
    String[] modules="${module_choose_url}".split(",")
    println("--wuwenliangJJPPKK__ the module_choose_url is is::"+module_choose_url)
    for (int i=0;i<modules.size();i++){
        println("--wuwenliangJJPPKK__ the modules[i] is is::"+modules[i])
         if("home".equals(modules[i])){
             project_module.add("com.cdsf.locman:moduleHome:v2.0.0")
         }else if("splash".equals(modules[i])){
            project_module.add("splash","com.cdsf.locman:moduleSplash:v2.0.0")
         }else if("A".equals(modules[i])){
             project_module.add("A","com.cdsf.locman:moduleA:v2.0.0")
         }else if("B".equals(modules[i])){
             project_module.add("B","com.cdsf.locman:moduleB:v2.0.0")
         }else if("C".equals(modules[i])){
             project_module.add("C","com.cdsf.locman:moduleC:v2.0.1")
         }else if("D".equals(modules[i])){
             project_module.add("D","com.cdsf.locman:moduleD:v2.0.0")
         }else if("E".equals(modules[i])){
             project_module.addt("E","com.cdsf.locman:moduleE:v2.0.0")
         }else if("F".equals(modules[i])){
             project_module.add("F","com.cdsf.locman:moduleF:v2.0.0")
         }
    }
}*/

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
/*    compile "com.cdsf.locman:moduleHome:v2.0.0"
    compile "com.cdsf.locman:moduleSplash:v2.0.0"
    compile "com.cdsf.locman:moduleA:v2.0.0"
    compile "com.cdsf.locman:moduleB:v2.0.0"
    compile "com.cdsf.locman:moduleC:v2.0.1"
    compile "com.cdsf.locman:moduleD:v2.0.0"
    compile "com.cdsf.locman:moduleE:v2.0.0"
    compile "com.cdsf.locman:moduleF:v2.0.0"*/
    //"${module_choose_url}"
/*    for (String value:project_module){
        compile value
    }*/
    //home,splash,A,B,C /app/src/main/assert/
    String[] modules="${module_choose_url}".split(",")
    for (int i=0;i<modules.size();i++){
        println("--wuwenliangJJPPKK__ the modules[i] is is::"+modules[i])
        if("home".equals(modules[i])){
            compile "com.cdsf.locman:moduleHome:v2.0.3"
        }else if("splash".equals(modules[i])){
            compile "com.cdsf.locman:moduleSplash:v2.0.0"
        }else if("A".equals(modules[i])){
            compile "com.cdsf.locman:moduleA:v2.0.0"
        }else if("B".equals(modules[i])){
            compile "com.cdsf.locman:moduleB:v2.0.0"
        }else if("C".equals(modules[i])){
            compile "com.cdsf.locman:moduleC:v2.0.1"
        }else if("D".equals(modules[i])){
            compile "com.cdsf.locman:moduleD:v2.0.0"
        }else if("E".equals(modules[i])){
            compile "com.cdsf.locman:moduleE:v2.0.0"
        }else if("F".equals(modules[i])){
            compile "com.cdsf.locman:moduleF:v2.0.0"
        }
    }
    compile 'com.alibaba:arouter-api:1.2.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.2'
}
